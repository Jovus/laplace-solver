###
#Patrick Halter, 4/15/2017
#This is the configuration file that goes with my 2D cartesian elliptic PDE solver.
#PHYS 613, HW3
###


#Comments are delineated by #
#Values to actually be read into the computer are bracketed by colons, like so
# :value:

#Bounds of the problem, from (min_x,min_y) to (max_x,max_y)

min_x 	:0: #minimum x value
min_y 	:0: #minimum y value
max_x 	:3: #maximum x value
max_y 	:3: #maximum y value
dx	:0.1: #step in x
dy	:0.1: #step in y
Q	:1: 
rho	:0: #right hand side. 0 corresponds to Laplace's equation

#boundary values are in the form groups of three arguments, in parentheses, like so:
#position, value, boundary_type
#  The position argument specifies the minimum value for this boundary condition to apply
#  The value is the value at the boundary
#  The boundary_type can be either 'dirichlet' or 'neumann' (apostrophes requires) and specify what kind of boundary condition is being given
#Boundaries can take multiple sets of three arguments, all in one, like so:
#  (POS1, VAL1, TYPE2, POS2, VAL2, TYPE2) and so forth

TOP 	:min_x, Q, dirichlet: 
BOTTOM	:min_x, 0, dirichlet:
LEFT 	:min_y, 0, neumann:
RIGHT 	:min_y, 0, dirichlet, 1, 0, neumann, 2, Q, dirichlet:

#Finally, which solver do we use? valid inputs are np for numpy's built-in solver, cg for our custom conjugate gradient solver, and ji for our custom jacobi iteration solver
#Please be aware that cg and ji currently don't work like they should

solver		:np:
tol		:1e-8: #tolerance to use in the solver. Ignored by np
maxiters	:1e6: #maximum number of iterations for the solver to use. Ignored by np and ji
